import pandas as pd
import os
import warnings
import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from telegram.error import NetworkError

warnings.filterwarnings("ignore", category=UserWarning)

ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))
df = pd.DataFrame()
table_loaded = False

def load_data():
    try:
        data = pd.read_excel("monitoring.xlsx")
        required_cols = ["–û–±'—î–∫—Ç", "–û–±–ª–∞—Å—Ç—å", "–ö–æ–Ω–∫—É—Ä—Å (1 - –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è, 2 –∑–∞–∫—É–ø—ñ–≤–ª—ñ)", "–•—Ç–æ –∑–¥—ñ–π—Å–Ω—é—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"]
        if all(col in data.columns for col in required_cols):
            print("‚úÖ –¢–∞–±–ª–∏—Ü—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞:", len(data), "—Ä—è–¥–∫—ñ–≤")
            return data
        else:
            print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ:", data.columns.tolist())
            return pd.DataFrame()
    except Exception as e:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ Excel:", e)
        return pd.DataFrame()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –Ω–∞–∑–≤—É –æ–±‚Äô—î–∫—Ç–∞ ‚Äî —è –ø–µ—Ä–µ–≤—ñ—Ä—é, —á–∏ –≤—ñ–Ω –≤–∂–µ –ø—ñ–¥ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–º.")

async def get_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üÜî –í–∞—à Telegram ID: {update.effective_user.id}")

async def debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global df
    status = "‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ" if not df.empty else "‚ùå –ù–ï –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ"
    await update.message.reply_text(f"üìä –°—Ç–∞–Ω —Ç–∞–±–ª–∏—Ü—ñ: {status}, –∑–∞–ø–∏—Å—ñ–≤: {len(df)}")

async def check_object(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global df
    if df.empty:
        await update.message.reply_text("‚ö†Ô∏è –ë–∞–∑–∞ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞. –ù–∞–¥—ñ—à–ª—ñ—Ç—å Excel-—Ñ–∞–π–ª.")
        return

    query = update.message.text.lower()
    matches = df[df["–û–±'—î–∫—Ç"].astype(str).str.lower().str.contains(query, na=False)]

    if not matches.empty:
        results = []
        for _, row in matches.head(3).iterrows():
            results.append(
                f"üèó {row["–û–±'—î–∫—Ç"]}
üìç {row["–û–±–ª–∞—Å—Ç—å"]}
üìä –ö–æ–Ω–∫—É—Ä—Å: {row["–ö–æ–Ω–∫—É—Ä—Å (1 - –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è, 2 –∑–∞–∫—É–ø—ñ–≤–ª—ñ)"]}
üëÄ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: {row["–•—Ç–æ –∑–¥—ñ–π—Å–Ω—é—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"]}"
            )
        await update.message.reply_text("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ:

" + "

".join(results))
    else:
        await update.message.reply_text("‚ùå –û–±'—î–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global df
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ.")
        return

    file = update.message.document
    if not file.file_name.endswith(".xlsx"):
        await update.message.reply_text("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª Excel (.xlsx)")
        return

    await update.message.reply_text("‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Ç–∞–±–ª–∏—Ü—é...")
    try:
        new_file = await file.get_file()
        await new_file.download_to_drive("monitoring.xlsx")
        df = load_data()
        if df.empty:
            await update.message.reply_text("‚ùå –¢–∞–±–ª–∏—Ü—è –Ω–µ –∑—á–∏—Ç–∞–ª–∞—Å—å –∞–±–æ –º–∞—î –ø–æ–º–∏–ª–∫–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç.")
        else:
            await update.message.reply_text("‚úÖ –¢–∞–±–ª–∏—Ü—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ: {e}")

async def run_bot():
    print("‚úÖ –ë–æ—Ç —Å—Ç–∞—Ä—Ç—É—î...")
    app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("id", get_id))
    app.add_handler(CommandHandler("debug", debug))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_object))
    app.add_handler(MessageHandler(filters.Document.ALL & ~filters.COMMAND, handle_file))

    for admin_id in ADMIN_IDS:
        try:
            await app.bot.send_message(chat_id=admin_id, text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏.")
        except:
            pass

    while True:
        try:
            await app.initialize()
            await app.start()
            print("‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î")
            await app.updater.start_polling()
            await app.updater.idle()
        except NetworkError as e:
            print("üîÅ –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞:", e)
            await asyncio.sleep(10)

if __name__ == "__main__":
    asyncio.run(run_bot())
