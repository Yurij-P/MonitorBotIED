import pandas as pd
import warnings
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import NetworkError
import asyncio

warnings.filterwarnings("ignore", category=UserWarning)
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))

def load_data():
    try:
        data = pd.read_excel("monitoring.xlsx", skiprows=2)
        return data[data["–û–±'—î–∫—Ç"].notna()]
    except Exception as e:
        print("‚ùå Excel –ø–æ–º–∏–ª–∫–∞:", e)
        return pd.DataFrame()

df = load_data()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –Ω–∞–∑–≤—É –æ–± º—î–∫—Ç–∞ ‚Äî —è –ø–µ—Ä–µ–≤—ñ—Ä—é, —á–∏ –≤—ñ–Ω –≤–∂–µ –ø—ñ–¥ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–º.")

async def get_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üÜî –í–∞—à Telegram ID: {update.effective_user.id}")

async def check_object(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global df
    query = update.message.text.lower()
    matches = df[df["–û–±'—î–∫—Ç"].str.lower().str.contains(query, na=False)]
    if not matches.empty:
        results = []
        for _, row in matches.head(3).iterrows():
            obj = row["–û–±'—î–∫—Ç"]
            monitor = row["–•—Ç–æ –∑–¥—ñ–π—Å–Ω—é—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"]
            text = f"üèó {obj}\nüëÄ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: {monitor}"
            results.append(text)
        await update.message.reply_text("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ:\n\n" + "\n\n".join(results))
    else:
        await update.message.reply_text("‚ùå –û–±'—î–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global df
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ.")
        return
    file = update.message.document
    if not file.file_name.endswith(".xlsx"):
        await update.message.reply_text("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ Excel (.xlsx)")
        return
    await update.message.reply_text("‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –Ω–æ–≤—É —Ç–∞–±–ª–∏—Ü—é...")
    new_file = await file.get_file()
    await new_file.download_to_drive("monitoring.xlsx")
    df = load_data()
    await update.message.reply_text("‚úÖ –¢–∞–±–ª–∏—Ü—è –æ–Ω–æ–≤–ª–µ–Ω–∞!")

async def run_bot():
    app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("id", get_id))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_object))
    app.add_handler(MessageHandler(filters.Document.ALL & ~filters.COMMAND, handle_file))
    while True:
        try:
            await app.initialize()
            await app.start()
            await app.updater.start_polling()
            await app.updater.idle()
        except NetworkError as e:
            print("üîÅ –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫...", e)
            await asyncio.sleep(10)

if __name__ == "__main__":
    asyncio.run(run_bot())
