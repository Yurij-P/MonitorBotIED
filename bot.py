
import pandas as pd
import warnings
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import NetworkError
import asyncio

warnings.filterwarnings("ignore", category=UserWarning)

ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))
df = pd.DataFrame()

def load_data():
    try:
        data = pd.read_excel("monitoring.xlsx")
        required_cols = ['–û–± º—î–∫—Ç', '–û–±–ª–∞—Å—Ç—å', "–ö–æ–Ω–∫—É—Ä—Å (1 ‚Äì –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è, 2 –∑–∞–∫—É–ø—ñ–≤–ª—ñ)", "–•—Ç–æ –∑–¥—ñ–π—Å–Ω—é—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"]
        if all(col in data.columns for col in required_cols):
            print("‚úÖ –¢–∞–±–ª–∏—Ü—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
            return data[data['–û–± º—î–∫—Ç'].notna()]
        else:
            print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ")
            return pd.DataFrame()
    except Exception as e:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ:", e)
        return pd.DataFrame()

df = load_data()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –Ω–∞–∑–≤—É –æ–± º—î–∫—Ç–∞ ‚Äì —è –ø–µ—Ä–µ–≤—ñ—Ä—é, —á–∏ –≤—ñ–Ω –≤–∂–µ –ø—ñ–¥ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–º.")

async def get_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üÜî –í–∞—à Telegram ID: {update.effective_user.id}")

async def debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global df
    status = "‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ" if not df.empty else "‚ùå –ù–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ"
    await update.message.reply_text("üìä –°—Ç–∞–Ω —Ç–∞–±–ª–∏—Ü—ñ: {} | –ó–∞–ø–∏—Å—ñ–≤: {}".format(status, len(df)))

async def check_object(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global df
    if df.empty:
        await update.message.reply_text("‚ö†Ô∏è –ë–∞–∑–∞ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞. –ù–∞–¥—ñ—à–ª—ñ—Ç—å Excel-—Ñ–∞–π–ª.")
        return

    query = update.message.text.lower()
    matches = df[df["–û–± º—î–∫—Ç"].astype(str).str.lower().str.contains(query, na=False)]

    if not matches.empty:
        results = []
        for _, row in matches.head(3).iterrows():
            result = (
                f"üèó –û–± º—î–∫—Ç: {row['–û–± º—î–∫—Ç']}"
                f"üìç –û–±–ª–∞—Å—Ç—å: {row['–û–±–ª–∞—Å—Ç—å']}"
                f"üèõ –ö–æ–Ω–∫—É—Ä—Å: {row['–ö–æ–Ω–∫—É—Ä—Å (1 ‚Äì –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è, 2 –∑–∞–∫—É–ø—ñ–≤–ª—ñ)']}"
                f"üëÄ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: {row['–•—Ç–æ –∑–¥—ñ–π—Å–Ω—é—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥']}"
            )
            results.append(result)
        await update.message.reply_text(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ:

" + "

".join(results))
    else:
        await update.message.reply_text("‚ùå –û–± º—î–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ.")

if __name__ == "__main__":
    async def run_bot():
        while True:
            try:
                app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()
                app.add_handler(CommandHandler("start", start))
                app.add_handler(CommandHandler("id", get_id))
                app.add_handler(CommandHandler("debug", debug))
                app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_object))

                await app.initialize()
                await app.start()
                await app.updater.start_polling()
                await app.updater.idle()
            except NetworkError as e:
                print("üîÅ –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...", e)
                await asyncio.sleep(10)

    asyncio.run(run_bot())
