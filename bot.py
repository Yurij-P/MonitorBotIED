import pandas as pd
import warnings
import os
import asyncio
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
)
from telegram.error import NetworkError

warnings.filterwarnings("ignore", category=UserWarning)

ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))
df = pd.DataFrame()

def load_data():
    try:
        data = pd.read_excel("monitoring.xlsx")
        data.columns = data.columns.str.strip()

        print("üßæ –ö–æ–ª–æ–Ω–∫–∏ –≤ Excel:", list(data.columns))

        expected_keywords = ['–æ–±‚Äô—î–∫—Ç', '–æ–±–ª–∞—Å—Ç—å', '–∫–æ–Ω–∫—É—Ä—Å', '–º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥']
        matched = [col for col in data.columns if any(kw in col.lower() for kw in expected_keywords)]

        if len(matched) >= 4:
            print("‚úÖ –¢–∞–±–ª–∏—Ü—è –º–∞—î –æ—á—ñ–∫—É–≤–∞–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏:", matched)
            return data[data[matched[0]].notna()]
        else:
            print("‚ùå –ù–µ –≤—Å—ñ –æ—á—ñ–∫—É–≤–∞–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return pd.DataFrame()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ Excel: {e}")
        return pd.DataFrame()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –Ω–∞–∑–≤—É –æ–±‚Äô—î–∫—Ç–∞ ‚Äì —è –ø–µ—Ä–µ–≤—ñ—Ä—é, —á–∏ –≤—ñ–Ω –≤–∂–µ –ø—ñ–¥ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–º.")

async def get_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üÜî –í–∞—à Telegram ID: {update.effective_user.id}")

async def debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global df
    status = "‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ" if not df.empty else "‚ùå –ù–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ"
    await update.message.reply_text(f"üóÇÔ∏è –°—Ç–∞–Ω —Ç–∞–±–ª–∏—Ü—ñ: {status} | –ó–∞–ø–∏—Å—ñ–≤: {len(df)}")

async def check_object(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global df
    if df.empty:
        await update.message.reply_text("‚ö†Ô∏è –ë–∞–∑–∞ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞.")
        return

    query = update.message.text.lower()
    matches = df[df[df.columns[0]].astype(str).str.lower().str.contains(query, na=False)]

    if not matches.empty:
        results = []
        for _, row in matches.head(3).iterrows():
            result = (
                f"üè¢ –û–±‚Äô—î–∫—Ç: {row[df.columns[0]]}\\n"
                f"üìç –û–±–ª–∞—Å—Ç—å: {row[df.columns[1]]}\\n"
                f"üìã –ö–æ–Ω–∫—É—Ä—Å: {row[df.columns[2]]}\\n"
                f"üëÅÔ∏è –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: {row[df.columns[3]]}"
            )
            results.append(result)
        await update.message.reply_text("üîç –ó–Ω–∞–π–¥–µ–Ω–æ:" + "\n\n".join(results))
    else:
        await update.message.reply_text("‚ùå –û–±‚Äô—î–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ.")

if __name__ == "__main__":
    df = load_data()

    async def run_bot():
        while True:
            try:
                app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()
                app.add_handler(CommandHandler("start", start))
                app.add_handler(CommandHandler("id", get_id))
                app.add_handler(CommandHandler("debug", debug))
                app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_object))
                await app.initialize()
                await app.start()
                await app.updater.start_polling()
                await app.updater.idle()
            except NetworkError as e:
                print("üåê –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...", e)
                await asyncio.sleep(10)

    asyncio.run(run_bot())
