import pandas as pd
import warnings
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import NetworkError
import asyncio

warnings.filterwarnings("ignore", category=UserWarning)

ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))
df = pd.DataFrame()

def load_data():
    try:
        data = pd.read_excel("monitoring.xlsx")
        required_cols = ["–û–±'—î–∫—Ç", "–û–±–ª–∞—Å—Ç—å", "–ö–æ–Ω–∫—É—Ä—Å (1 - –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è, 2 –∑–∞–∫—É–ø—ñ–≤–ª—ñ)", "–•—Ç–æ –∑–¥—ñ–π—Å–Ω—é—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"]
        if all(col in data.columns for col in required_cols):
            print("‚úÖ –¢–∞–±–ª–∏—Ü—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
            return data[data["–û–±'—î–∫—Ç"].notna()]
        else:
            print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ")
            return pd.DataFrame()
    except Exception as e:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ:", e)
        return pd.DataFrame()

df = load_data()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –Ω–∞–∑–≤—É –æ–± º—î–∫—Ç–∞ ‚Äî —è –ø–µ—Ä–µ–≤—ñ—Ä—é, —á–∏ –≤—ñ–Ω –≤–∂–µ –ø—ñ–¥ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–º.")

async def get_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üÜî –í–∞—à Telegram ID: {update.effective_user.id}")

async def check_object(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global df
    if df.empty:
        await update.message.reply_text("‚ö†Ô∏è –ë–∞–∑–∞ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞. –ù–∞–¥—ñ—à–ª—ñ—Ç—å Excel-—Ñ–∞–π–ª.")
        return

    query = update.message.text.lower()
    matches = df[df["–û–±'—î–∫—Ç"].str.lower().str.contains(query, na=False)]

    if not matches.empty:
        results = []
        for _, row in matches.iterrows():
            obj = row["–û–±'—î–∫—Ç"]
            oblast = row["–û–±–ª–∞—Å—Ç—å"]
            contest = row["–ö–æ–Ω–∫—É—Ä—Å (1 - –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è, 2 –∑–∞–∫—É–ø—ñ–≤–ª—ñ)"]
            monitor = row["–•—Ç–æ –∑–¥—ñ–π—Å–Ω—é—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"]
            results.append(f"üèó {obj}\nüìç {oblast}\nüìä –ö–æ–Ω–∫—É—Ä—Å: {contest}\nüëÄ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: {monitor}")
        await update.message.reply_text("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ:\n\n" + "\n\n".join(results[:3]))
    else:
        await update.message.reply_text("‚ùå –û–±'—î–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global df
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ.")
        return

    file = update.message.document
    if not file.file_name.endswith(".xlsx"):
        await update.message.reply_text("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ Excel (.xlsx)")
        return

    await update.message.reply_text("‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –Ω–æ–≤—É —Ç–∞–±–ª–∏—Ü—é...")
    try:
        new_file = await file.get_file()
        await new_file.download_to_drive("monitoring.xlsx")
        df = load_data()
        if df.empty:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.")
        else:
            await update.message.reply_text("‚úÖ –¢–∞–±–ª–∏—Ü—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é: {e}")

async def run_bot():
    print("üöÄ run_bot() –ø–æ—á–∞–≤—Å—è")
    app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("id", get_id))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_object))
    app.add_handler(MessageHandler(filters.Document.ALL & ~filters.COMMAND, handle_file))

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ –∑–∞–ø—É—Å–∫
    for admin_id in ADMIN_IDS:
        try:
            await app.bot.send_message(chat_id=admin_id, text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—î –æ–±'—î–∫—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω—É {admin_id}: {e}")

    while True:
        try:
            await app.initialize()
            await app.start()
            print("‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î. –û—á—ñ–∫—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
            await app.updater.start_polling()
            await app.updater.idle()
        except NetworkError as e:
            print("üîÅ –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫...", e)
            await asyncio.sleep(10)

if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç —Å—Ç–∞—Ä—Ç—É—î...")
    asyncio.run(run_bot())
